type Order {
    id: Int
    orderDetails: [OrderDetail]!
    reader: Reader
    address: Address
    datetimeCreated: String
    orderStatus: OrderStatus
    orderTracks: [OrderTrack]!
    paymentType: PaymentType
    shippingType: ShippingType
    subtotal: Float
    shippingFee: Float
    numOfItems: Int
    grandTotal: Float
    deliverDays: Int
    expectedDeliverDate: String
}

input OrderInput {
    id: Int
    orderDetails: [OrderDetailInput]!
    reader: ReaderInput
    address: AddressInput
    datetimeCreated: String
    orderStatus: OrderStatus
    orderTracks: [OrderTrackInput]!
    paymentType: PaymentType
    shippingType: ShippingType
    subtotal: Float
    shippingFee: Float
    numOfItems: Int
    grandTotal: Float
    deliverDays: Int
    expectedDeliverDate: String
}

enum OrderStatus {
    PAID, CANCELLED, PROCESSING, SHIPPED, DELIVERED, RETURN_REQUESTED, RETURNED, REFUNDED
    
}

enum PaymentType {
    CARD, PAYPAL, VENMO
}

enum ShippingType {
    STANDARD, EXPRESS, NONE
}

type OrderDetail {
    id: Int
    bookVariant: BookVariant
    order: Order
    quantity: Int
    subtotal: Float
    bookVariantId: Int

}

input OrderDetailInput {
    id: Int
    bookVariant: BookVariantInput
    order: OrderInput
    quantity: Int
    subtotal: Float
    bookVariantId: Int

}

type OrderTrack {
    id: Int
    order: Order
    details: String
    timestamp: String

}

input OrderTrackInput {
    id: Int
    order: OrderInput
    details: String
    timestamp: String

}

extend type Query {
    getOrdersByReaderID(id: Int): [Order]!
    getOrder(orderId: Int): Order

}

extend type Mutation {
    # createOrder(reader: ReaderInput, checkout: CheckoutInput): Order  Don't have this
    setOrderStatus(orderId: Int, status: OrderStatus): Order
    createOrderTrack(orderId: Int, description: String): OrderTrack
    deleteOrder(orderId: Int): Boolean
}